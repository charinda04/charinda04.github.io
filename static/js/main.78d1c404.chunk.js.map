{"version":3,"sources":["components/clock/Clock.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Clock","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","days","hours","min","sec","inherits","createClass","key","value","_this2","interval","setInterval","date","calculateCountdown","setState","stop","endDate","diff","Date","parse","timeLeft","years","millisec","Math","floor","clearInterval","String","length","countDown","react_default","a","createElement","className","addLeadingZeros","Component","defaultProps","App","currentDate","year","getMonth","getDate","getFullYear","src","logo","alt","href","target","rel","clock_Clock","concat","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.78d1c404.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Moment from \"moment\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport class Clock extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      days: 0,\r\n      hours: 0,\r\n      min: 0,\r\n      sec: 0\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // update every second\r\n    this.interval = setInterval(() => {\r\n      const date = this.calculateCountdown(this.props.date);\r\n      date ? this.setState(date) : this.stop();\r\n    }, 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.stop();\r\n  }\r\n\r\n  calculateCountdown(endDate) {\r\n    let diff = (Date.parse(new Date(endDate)) - Date.parse(new Date())) / 1000;\r\n\r\n    // clear countdown when date is reached\r\n    if (diff <= 0) return false;\r\n\r\n    const timeLeft = {\r\n      years: 0,\r\n      days: 0,\r\n      hours: 0,\r\n      min: 0,\r\n      sec: 0,\r\n      millisec: 0\r\n    };\r\n\r\n    // calculate time difference between now and expected date\r\n    if (diff >= 365.25 * 86400) {\r\n      // 365.25 * 24 * 60 * 60\r\n      timeLeft.years = Math.floor(diff / (365.25 * 86400));\r\n      diff -= timeLeft.years * 365.25 * 86400;\r\n    }\r\n    if (diff >= 86400) {\r\n      // 24 * 60 * 60\r\n      timeLeft.days = Math.floor(diff / 86400);\r\n      diff -= timeLeft.days * 86400;\r\n    }\r\n    if (diff >= 3600) {\r\n      // 60 * 60\r\n      timeLeft.hours = Math.floor(diff / 3600);\r\n      diff -= timeLeft.hours * 3600;\r\n    }\r\n    if (diff >= 60) {\r\n      timeLeft.min = Math.floor(diff / 60);\r\n      diff -= timeLeft.min * 60;\r\n    }\r\n    timeLeft.sec = diff;\r\n\r\n    return timeLeft;\r\n  }\r\n\r\n  stop() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  addLeadingZeros(value) {\r\n    value = String(value);\r\n    while (value.length < 2) {\r\n      value = \"0\" + value;\r\n    }\r\n    return value;\r\n  }\r\n\r\n  render() {\r\n    // const currentDate = Moment().format();\r\n    // const { days, minutes, seconds } = this.state;\r\n    const countDown = this.state;\r\n\r\n    // return (\r\n    //   <div>\r\n    //     <h1>\r\n    //       {days} Days {minutes} Minutes {seconds} Seconds Remaining{\" \"}\r\n    //     </h1>\r\n    //     <h2>For the First stage of my site</h2>\r\n    //   </div>\r\n    // );\r\n    return (\r\n      <div className=\"Countdown\">\r\n        <h1>days until the 1st stage of my site</h1>\r\n        <span className=\"Countdown-col\">\r\n          <span className=\"Countdown-col-element\">\r\n            <strong>{this.addLeadingZeros(countDown.days)}</strong>\r\n            <span>{countDown.days === 1 ? \"Day\" : \"Days\"}</span>\r\n          </span>\r\n        </span>\r\n\r\n        <span className=\"Countdown-col\">\r\n          <span className=\"Countdown-col-element\">\r\n            <strong>{this.addLeadingZeros(countDown.hours)}</strong>\r\n            <span>Hours</span>\r\n          </span>\r\n        </span>\r\n\r\n        <span className=\"Countdown-col\">\r\n          <span className=\"Countdown-col-element\">\r\n            <strong>{this.addLeadingZeros(countDown.min)}</strong>\r\n            <span>Min</span>\r\n          </span>\r\n        </span>\r\n\r\n        <span className=\"Countdown-col\">\r\n          <span className=\"Countdown-col-element\">\r\n            <strong>{this.addLeadingZeros(countDown.sec)}</strong>\r\n            <span>Sec</span>\r\n          </span>\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nClock.propTypes = {\r\n  date: PropTypes.string.isRequired\r\n};\r\n\r\nClock.defaultProps = {\r\n  date: new Date()\r\n};\r\n\r\nexport default Clock;\r\n","import React, { Component } from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport Clock from \"./components/clock/Clock\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    const currentDate = new Date();\r\n    const year =\r\n      currentDate.getMonth() === 11 && currentDate.getDate() > 23\r\n        ? currentDate.getFullYear() + 1\r\n        : currentDate.getFullYear();\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <p>This page is under construction</p>\r\n          <a\r\n            className=\"App-link\"\r\n            href=\"https://www.linkedin.com/in/charinda-dissanayake/\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Contact Me\r\n          </a>\r\n          <Clock date={`${year}-05-08T00:00:00`} />\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}